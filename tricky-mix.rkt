#lang racket

(require "mix-utils.rkt")
(require "turing-machine-interpreter.rkt")
(require "flowchart-interpreter.rkt")
(require "flowchart-flowchart-interpreter.rkt")

(provide tricky-mix)

(define tricky-mix
  `((read program division vs0)
    (init       (:= pending (list (list (caadr program) vs0)))
                (:= live-v (,live-vars program division))
                (:= marked (list (list (caadr program)
                                       (,project (caadr program) vs0 live-v))))
                (:= residual (list (,mix-read (car program) division)))
                (:= cnt 0)
                (:= idx (hash))
                (:= idx-cnt (,idx-cnt-update (caadr program)
                                             vs0
                                             idx
                                             cnt
                                             live-v))
                (:= cnt (cadr idx-cnt))
                (:= idx (car idx-cnt))
                (:= dyn-l (,dyn-labels program division))
                (goto while-pend))
    (lookup     (:= tail dyn-l)
                (goto lookup-cnt))
    (lookup-cnt (if (null? tail) lookup-err lookup-if))
    (lookup-if  (:= pp-cur (car tail))
                (:= tail (cdr tail))
                (if (equal? pp-cur pp) lookup-set lookup-cnt))
    (lookup-set (:= bb (,lookup pp-cur program))
                (goto while-bb))
    (while-pend (if (null? pending) ret cont-pend))
    (cont-pend  (:= top (car pending))
                (:= pending (cdr pending))
                (:= pp (car top))
                (:= vs (cadr top))
                (:= label (,gen-label pp vs idx live-v))
                (:= code (list label))
                (goto lookup))
    (while-bb   (if (null? bb) upd-res cont-bb))
    (cont-bb    (:= command (car bb))
                (:= bb (cdr bb))
                (goto check-eq))
    (check-eq   (if (equal? ':= (car command)) match-eq check-goto))
    (check-goto (if (equal? 'goto (car command)) match-goto check-if))
    (check-if   (if (equal? 'if (car command)) match-if check-ret))
    (check-ret  (if (equal? 'return (car command)) match-ret err))
    (match-eq   (:= X (cadr command))
                (:= expr (caddr command))
                (if (member X (car division)) eq-t eq-f))
    (eq-t       (:= val (,eval-ctx vs expr))
                (:= vs (,clear-ctx vs X))
                (:= vs (cons (list X val) vs))
                (goto while-bb))
    (eq-f       (:= code (cons (list ':= X (,reduce expr vs)) code))
                (goto while-bb))
    (match-goto (:= pp-nxt (cadr command))
                (:= bb (,lookup pp-nxt program))
                (goto while-bb))
    (match-if   (:= expr (cadr command))
                (:= ppt (caddr command))
                (:= ppf (cadddr command))
                (if (,is-static expr division) if-t if-f))
    (if-t       (if (,eval-ctx vs expr) if-t-t if-t-f))
    (if-t-t     (:= bb (,lookup ppt program))
                (:= ppt '())
                (:= ppf '())
                (goto while-bb))
    (if-t-f     (:= bb (,lookup ppf program))
                (:= ppf '())
                (:= ppt '())
                (goto while-bb))
    (if-f       (:= pptvs (,project ppt vs live-v))
                (:= ppfvs (,project ppf vs live-v))
                (:= idx-cnt (,idx-cnt-update ppt pptvs idx cnt live-v))
                (:= cnt (cadr idx-cnt))
                (:= idx (car idx-cnt))
                (:= idx-cnt (,idx-cnt-update ppf ppfvs idx cnt live-v))
                (:= cnt (cadr idx-cnt))
                (:= idx (car idx-cnt))
                (:= pending (append pending
                                    (,unmarked
                                     live-v
                                     marked
                                     (list (list ppt vs)
                                           (list ppf vs)))))
                (:= marked (,remove-duplicates (append marked
                                                      (list (list ppt pptvs)
                                                            (list ppf ppfvs)))))
                (:= code (cons (list 'if
                                     (,reduce expr vs)
                                     (,gen-label ppt pptvs idx live-v)
                                     (,gen-label ppf ppfvs idx live-v))
                               code))
                (goto while-bb))
    (match-ret  (:= expr (cadr command))
                (:= val (,reduce expr vs))
                (:= code (cons (list 'return val) code))
                (goto while-bb))
    (err        (return (~a "match error")))
    (lookup-err (return (~a "lookup error")))
    (upd-res    (:= residual (cons (reverse code) residual))
                (goto while-pend))
    (ret        (return (reverse residual)))
    )
  )
