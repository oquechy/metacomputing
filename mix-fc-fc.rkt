#lang racket

(provide mix mix-read sort-ctx clear-ctx reduce is-static lookup gen-label)

(require "flowchart-interpreter.rkt")
(require "turing-machine-interpreter.rkt")

(define (mix-read read division)
  (remove* (car division) read))

(define (sort-ctx ctx)
  (sort ctx (λ (l r) (symbol<? (car l) (car l)))))

(define (reduce expr vs)
  (define (reduce-in-ctx expr)
    (reduce expr vs))
  (with-handlers
      ([exn:fail? (λ (_) (if (list? expr) (map reduce-in-ctx expr) expr))])
    ;(let [(res `',(eval-ctx vs expr))] (println expr) (println res) res)
    `',(eval-ctx vs expr)
    ))

(define (is-static expr vs)
  (with-handlers
      ([exn:fail? (λ (_) #f)])
    (eval-ctx vs expr)
    #t))

(define (lookup pp program)
  (cdr (findf (λ (b) (equal? (car b) pp)) program)))

(define (gen-label label vs idx)
  (string->symbol (~a label (hash-ref idx vs))))

(define (clear-ctx ctx X)
  (filter-not (λ (el) (equal? (car el) X)) ctx))

(define mix
  `((read program division vs0)
    (init       ;(:= debug (println 'init))
                (:= pending (list (list (caadr program) (,sort-ctx vs0))))
                (:= marked '[])
                (:= residual (list (,mix-read (car program) division)))
                (:= cnt 1)
                (:= idx (hash vs0 cnt))
                (goto while-pend))
    (while-pend ;(:= debug (println 'while-pend))
                ;(:= debug (println pending))
                (if (null? pending) ret cont-pend))
    (cont-pend  ;(:= debug (println 'cont-pend))
                (:= top (car pending))
                (:= pending (cdr pending))
                (:= pp (car top))
                (:= vs (cadr top))
                (:= marked (cons top marked))
                (:= bb (,lookup pp program))
                (:= label (,gen-label pp vs idx))
                (:= code (list label))
                (goto while-bb))
    (while-bb   ;(:= debug (println 'while-bb))
                ;(:= debug (println bb))
                ;(:= debug (println vs))
                (if (null? bb) upd-res cont-bb))
    (cont-bb    ;(:= debug (println 'cont-bb))
                (:= command (car bb))
                (:= bb (cdr bb))
                (goto check-eq))
    (check-eq   ;(:= debug (println 'check-eq))
                (if (equal? ':= (car command)) match-eq check-goto))
    (check-goto ;(:= debug (println 'check-goto))
                (if (equal? 'goto (car command)) match-goto check-if))
    (check-if   ;(:= debug (println 'check-if))
                (if (equal? 'if (car command)) match-if check-ret))
    (check-ret  ;(:= debug (println 'check-ret))
                (if (equal? 'return (car command)) match-ret err))
    (match-eq   ;(:= debug (println 'match-eq))
                (:= X (cadr command))
                (:= expr (caddr command))
                ;(:= debug (println X))
                ;(:= debug (println (car division)))
                (if (member X (car division)) eq-t eq-f))
    (eq-t       ;(:= debug (println 'eq-t))
                (:= val (eval-ctx vs expr))
                ;(:= debug (print 'val=))
                ;(:= debug (println val))
                (:= vs (,clear-ctx vs X))
                ;(:= debug (print 'vs=))
                ;(:= debug (println vs))
                (:= vs (,sort-ctx (cons (list X val) vs)))
                ;(:= debug (print 'vs=))
                ;(:= debug (println vs))
                ;(:= debug (print 'idx=))
                ;(:= debug (println idx))
                (:= cnt (if (hash-has-key? idx vs) cnt (+ cnt 1)))
                ;(:= debug (print 'cnt=))
                ;(:= debug (println cnt))
                (:= idx (hash-update idx vs identity cnt))
                ;(:= debug (print 'idx=))
                ;(:= debug (println idx))
                (goto while-bb))
    (eq-f       ;(:= debug (println 'eq-f))
                (:= val (,reduce expr vs))
                ;(:= debug (println val))
                (:= code (cons (list ':= X val) code))
                (goto while-bb))
    (match-goto ;(:= debug (println 'match-goto))
                (:= pp-nxt (cadr command))
                (:= bb (,lookup pp-nxt program))
                (goto while-bb))
    (match-if   ;(:= debug (println 'match-if))
                (:= expr (cadr command))
                (:= ppt (caddr command))
                (:= ppf (cadddr command))
                (if (,is-static expr vs) if-t if-f))
    (if-t       ;(:= debug (println 'if-t))
                (if (eval-ctx vs expr) if-t-t if-t-f))
    (if-t-t     ;(:= debug (println 'if-t-t))
                (:= bb (,lookup ppt program))
                (goto while-bb))
    (if-t-f     ;(:= debug (println 'if-t-f))
                (:= bb (,lookup ppf program))
                (goto while-bb))
    (if-f       ;(:= debug (println 'if-f))
                ;(:= debug (println pending))
                (:= pending (append pending
                                    (list (list ppt vs) (list ppf vs))))
                ;(:= debug (println pending))
                (:= pending (remove* marked pending))
                ;(:= debug (println pending))
                (:= val (,reduce expr vs))
                (:= labelt (,gen-label ppt vs idx))
                (:= labelf (,gen-label ppf vs idx))
                (:= code (cons (list 'if val labelt labelf) code))
                (goto while-bb))
    (match-ret  ;(:= debug (println 'match-ret))
                (:= expr (cadr command))
                (:= val (,reduce expr vs))
                ;(:= debug (println expr))
                ;(:= debug (println vs))
                (:= code (cons (list 'return val) code))
                (goto while-bb))
    (err        ;(:= debug (println 'err))
                (return (~a "match error in " command)))
    (upd-res    ;(:= debug (println 'upd-res))
                (:= residual (cons (reverse code) residual))
                (goto while-pend))
    (ret        ;(:= debug (println 'ret))
                (return (reverse residual)))
    )
  )
 
;(define fn
;  (int mix `[,find_name
;             [[name namelist] [valuelist]]
;             [(name c) (namelist [a b c d])]]))

;(define target1
;  (int mix `[,tm-int
;             [[Q Qtail op cmd] [Right]]
;             [(Q ,tm-example) (Qtail '()) (op '()) (cmd '())]]))

(define comp
  (int mix `[,mix
             [[program division] []]
             [(program ,tm-int) (division [[Q Qtail op cmd] [Right]])]]))

;(println (int fn '[[1 2 3 4]]))
;(println (int target1 '[[1 1 1 0 0]]))
;(int comp `[[(Q ,tm-example)
;             (Qtail ())
;             (op ())
;             (cmd ())]])
;comp